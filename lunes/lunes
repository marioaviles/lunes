#!/usr/bin/env python
# generador de plantillas
from jinja2 import Environment, FileSystemLoader
import os
import pkg_resources
import fire
from pathlib import Path

DATA_PATH = pkg_resources.resource_filename('lunes', 'templates')
file_loader = FileSystemLoader(DATA_PATH)
#file_loader = FileSystemLoader('templates')
env = Environment(loader=file_loader)

def template_generator(template_name, model_name, fields,all_fields_names,new_file=None):
    prefolder = ''
    if (template_name.endswith('html')):
        if model_name != '':
            prefolder = 'templates/'+ model_name+'/'
        else:
            prefolder = 'templates/'
    template = env.get_template(template_name)
    rendered = template.render(model=model_name.capitalize(),module=model_name,fields= fields ,all_fields_names=all_fields_names)
    save_file(prefolder, template_name, rendered,new_file)

def generate_crud_templates(model_name,fields,all_fields_names ):
    #returns the html template
    template_generator('new.html',model_name,fields,all_fields_names)
    template_generator('edit.html',model_name,fields,all_fields_names)
    template_generator('show.html',model_name,fields,all_fields_names)
    template_generator('index.html',model_name,fields,all_fields_names)
    template_generator('app.html','',fields,all_fields_names)
    template_generator('controller.py',model_name,fields,all_fields_names,new_file=model_name+'.py')
    template_generator('app.py',model_name,fields,all_fields_names)
    

def save_file(folder,filename, content, new_file=None):
    """Saves `model` to `model_path`"""
    content = str.encode(content)
    if folder != '':
        Path(folder).mkdir(parents=True, exist_ok=True)
    if new_file:
       filename = new_file 
    with open(folder+filename, 'wb') as file:
        file.write(content)

def g(model:str , *args):
    """ creates scaffold for crud operations 
    :param module name 
    :param fields fieldname:(str|int)
    """
    types ={'str':'text','int':'number'}
    all_fields_names=''
    fields = []
    for i in args:
        if ':' in i :
            name,kind = i.split(':')
            f = {'name':'','type':'text'}
            if kind in types.keys():
                f = {'name':name,'type':types[kind]}
            else :
                f.name =name 
        else:
            f = {'name':i,'type':'text'}
        all_fields_names += "'"+f['name']+"',"
        fields.append(f)
    generate_crud_templates(model, fields,all_fields_names[:-1])

if __name__ == "__main__":
    fire.Fire({
        "g":g,
    })
