#!/usr/bin/env python3
# generador de plantillas
from jinja2 import Environment, FileSystemLoader
import os
import pkg_resources
import fire
from pathlib import Path

DATA_PATH = pkg_resources.resource_filename('lunes', 'templates')
file_loader = FileSystemLoader(DATA_PATH)
#file_loader = FileSystemLoader('templates')
env = Environment(loader=file_loader)

def template_creator(template_name, pathname,module=None, fields=[],all_fields_names=[]):
    template = env.get_template(template_name)
    content= template.render(module=module,fields= fields,
            all_fields_names=all_fields_names)
    save_file(pathname,  content)

def generate_new_project(proyect_name):
    """ creates new app directory """
    Path(proyect_name+'/templates').mkdir(parents=True, exist_ok=True)
    template_creator('app.html',proyect_name+'/templates/app.html')
    template_creator('app.py',proyect_name+'/app.py')

def generate_crud_templates(module,fields,all_fields_names ):
    crud_templates = ['new.html','edit.html','show.html','index.html']
    for tlp in crud_templates:
        template_creator(tlp,'templates/'+module+'/'+tlp,module,fields,all_fields_names)
    template_creator('controller.py',module+'.py',module,fields,all_fields_names)
    append_to_file('app.py', 'import '+module+'\n')

def save_file(path, content):
    """saves a file """
    content = str.encode(content)
    folder = Path(path).parent
    Path(folder).mkdir(parents=True, exist_ok=True)
    with open(path, 'wb') as file:
        file.write(content)

def append_to_file(filepath, content):
    with open(filepath, 'a') as file:
        file.write(content)

def c(proyect_name):
    """ creates a new app directory 
    :param proyect name 
    """
    generate_new_project(proyect_name)

def g(module , *args):
    """ creates scaffold for crud operations 
    :param module name 
    :param fields fieldname:(str|int)
    """
    types ={'str':'text','int':'number'}
    all_fields_names=''
    fields = []
    for i in args:
        if ':' in i :
            name,kind = i.split(':')
            f = {'name':'','type':'text'}
            if kind in types.keys():
                f = {'name':name,'type':types[kind]}
            else :
                f.name =name 
        else:
            f = {'name':i,'type':'text'}
        all_fields_names += "'"+f['name']+"',"
        fields.append(f)
    generate_crud_templates(module, fields,all_fields_names[:-1])

if __name__ == "__main__":
    fire.Fire({
        "c":c,
        "g":g
    })
